#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

class User {
    string username;
    string password;

public:
    User() = default;
    User(const string& uname, const string& pwd) : username(uname), password(pwd) {}

    string getUsername() const { return username; }
    bool checkPassword(const string& pwd) const { return password == pwd; }
};

class Cake {
    string name;
    string description;
    double price;
    vector<string> customizations;
    string size; 

public:
    Cake(const string& n, const string& desc, double p, const string& s, const vector<string>& customizations = {})
        : name(n), description(desc), price(p), size(s), customizations(customizations) {}

    void display() const {
        cout << "Nama       : " << name << endl
             << "   Keterangan : " << description << endl
             << "   Harga      : Rp. " << price << endl
             << "   Ukuran     : " << size << endl; 
        if (!customizations.empty()) {
            cout << "   Toping yang tersedia: ";
            for (const auto& custom : customizations) {
                cout << custom << " ";
            }
            cout << endl;
        }
    }

    string getName() const { return name; }
    double getPrice() const { return price; }
    vector<string> getCustomizations() const { return customizations; }
};

class Order {
    User customer;
    Cake cake;
    vector<string> customizations;
    double totalPrice;

public:
    Order(const User& u, const Cake& c, const vector<string>& customs, double total)
        : customer(u), cake(c), customizations(customs), totalPrice(total) {}

    void displayReceipt() const {
        cout << "Nama Pemesan : " << customer.getUsername() << endl;
        cout << "Kue          : " << cake.getName() << endl;
        if (!customizations.empty()) {
        cout << "Toping       : ";
            for (const auto& custom : customizations) {
                cout << custom << " ";
            }
            cout << endl;
        }
        cout << "Total Harga  :Rp" << totalPrice << endl;
    }
};

class BakerySystem {
    map<string, User> users;
    vector<Cake> cakes;
    vector<Order> orders;

public:
    void registerUser(const string& uname, const string& pwd) {
        if (uname.empty() || pwd.empty()) {
            cout << "Nama pengguna dan kata sandi tidak boleh kosong." << endl;
            return;
        }
        if (users.find(uname) == users.end()) {
            users[uname] = User(uname, pwd);
            cout <<"--Pendaftaran Anda Berhasil--" << endl;
        } else {
            cout << "Nama pengguna sudah ada." << endl;
        }
    }

    User* loginUser(const string& uname, const string& pwd) {
        auto it = users.find(uname);
        if (it != users.end() && it->second.checkPassword(pwd)) {
            cout << endl<<"--Login berhasil--"<<endl;
            return &it->second;
        } else {
            cout << "Nama pengguna dan kata sandi salah." << endl;
            return nullptr;
        }
    }

    void addCake(const Cake& c) {
        cakes.push_back(c);
    }

    void displayCakes() const {
        if (cakes.empty()) {
            cout << "Tidak ada kue yang tersedia." << endl;
        } else {
            for (size_t i = 0; i < cakes.size(); ++i) {
                cout << i + 1 << ". ";
                cakes[i].display();
            }
        }
    }

    void placeOrder(User* user, size_t cakeIndex, const vector<string>& customizations) {
        if (user == nullptr) {
            cout << "Pengguna tidak valid. Silahkan masuk terlebih dahulu" << endl;
            return;
        }
        if (cakeIndex < 1 || cakeIndex > cakes.size()) {
            cout << "Pemilik kue tidak valid." << endl;
            return;
        }
        const Cake& cake = cakes[cakeIndex - 1];
        double total = cake.getPrice();
        orders.emplace_back(*user, cake, customizations, total);
        cout << "Pesanan berhasil dilakukan." << endl;
    }

    void displayOrders() const {
        if (orders.empty()) {
            cout << "Belum ada pesanan ." << endl;
        } else {
            for (const auto& order : orders) {
                order.displayReceipt();
            }
        }
    }
};

void displayMainMenu() {
    cout<< "============================"<<endl;
    cout << "1. Register"<<endl;
    cout << "2. Login"<<endl;
    cout << "3. Keluar"<<endl;
    cout<< "============================"<<endl;
    cout << "Pilih Salah satu Opsi :";
   
  
    	
}

void displayUserMenu() {
	
    cout<< "============================"<<endl;
    cout << "1. Daftar Kue"<<endl;
    cout << "2. Order"<<endl;
    cout << "3. Melihat Pesanan"<<endl;
    cout << "4. Keluar"<<endl;
    cout<< "============================"<<endl;
    cout << "Pilih salah satu opsi:"<<endl;
}

int main() {
    BakerySystem system;
   
   
    system.addCake(Cake("Chocolate Cake ", "Delicious chocolate cake", 20000.0, "large", {"Extra Chocolate &", "Fruit Toppings \n"}));
    system.addCake(Cake("Vanilla Cake", "Classic vanilla cake", 15000.0, "medium", {"Extra Cream &", "Cherry Toppings \n"}));
    system.addCake(Cake("Cheese Cake", "Soft cheese cake with cream cheese frosting", 150000, "large", {"Extra Cream &", "Cherry Toppings \n"}));
    system.addCake(Cake("Chocolate Brownie", "Chocolate brownies with nuts", 100000, "medium", {"Extra Cream &", "Cherry Toppings \n"}));
    system.addCake(Cake("Vanilla Cupcake", "Vanilla cupcake with buttercream topping", 25000 ,"small", {"Extra Cream &", "Cherry Toppings\n"} ));
    system.addCake(Cake("Strawberry Chiffon Shortcake", "Strawberry Shortcake with whipped cream and fresh fruit slices &", 100000, "large", {"Extra Cream", "Cherry Toppings \n"}));
    system.addCake(Cake("Black Forest Cake", "Black Forest with sweet cream and chocolate", 120000, "medium", {"Extra Cream &", "Cherry Toppings \n"}));
    system.addCake(Cake("Fruit Cake", "Fruit Cake with assorted fruit toppings", 250000, "large", {"Extra Cream &", "Cherry Toppings \n"}));
    system.addCake(Cake("Matcha Cake", "Matcha Cake with refreshing flavor", 70000, "small", {"Extra Cream &", "Cherry Toppings \n"}));
    


    bool running = true;
    while (running) {
        displayMainMenu();
        int choice;
        cin >> choice;
        cin.ignore();  

        switch (choice) {
            case 1: {
                string username, password;
                cout << "Masukkan Username: ";
                getline(cin, username);
                cout << "Masukkan Password: ";
                getline(cin, password);
                system.registerUser(username, password);
                break;
            }
            case 2: {
                string username, password;
                cout << "Username : ";
                getline(cin, username);
                cout << "Password : ";
                getline(cin, password);
                User* loggedInUser = system.loginUser(username, password);
                if (loggedInUser) {
                    bool loggedIn = true;
                    while (loggedIn) {
                        displayUserMenu();
                        int userChoice;
                        cin >> userChoice;
                        cin.ignore();  

                        switch (userChoice) {
                            case 1:
                                system.displayCakes();
                                break;
                            case 2: {
                                system.displayCakes();
                                size_t cakeIndex;
                                cout << "Pilih nomor kue: ";
                                cin >> cakeIndex;
                                cin.ignore(); 

                                vector<string> customizations;
                                string customization;
                                char addMore;
                                do {
                                    cout << "Masukkan detail toping: ";
                                    getline(cin, customization);
                                    customizations.push_back(customization);
                                    cout << "Tambahkan toping ? (y/n): ";
                                    cin >> addMore;
                                    cin.ignore();  
                                } while (addMore == 'y' || addMore == 'Y');
                                
                                system.placeOrder(loggedInUser, cakeIndex, customizations);
                                break;
                            }
                            case 3:
                                system.displayOrders();
                                break;
                            case 4:
                                loggedIn = false;
                                cout << "Berhasil keluar." << endl;
                                break;
                            default:
                                cout << "Opsi tidak valid. Silahkan coba lagi." << endl;
                        }
                    }
                }
                break;
            }
            case 3:
                running = false;
                cout << "Keluar dari program." << endl;
                break;
            default:
                cout << "Pilihan tidak valid. Silahkan coba lagi." << endl;
        }
    }

    return 0;
}
